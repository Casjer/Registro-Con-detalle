@page "/RPrestamos"

@using Tarea3.Models;
@using Tarea3.BLL;
@inject IToastService toast

<EditForm Model="Prestamo" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="row d-flex justify-content-center">

        <div class="col-md-6 col-sm-11 col-11">

            <div class="card mt-1">

                <div class="card-header">
                    <h1>Registro de Prestamos</h1>
                </div>

                
                <div class="card-body">
                    <form>
                        <div class="mb-3">
                            <label class="form-label">PrestamoId</label>
                            <InputNumber class="form-control" @bind-Value="Prestamo.PrestamoId" />
                            <button class="btn btn-warning" type="button" @onclick="Buscar">
                                <i class="oi oi-magnifying-glass" /> Buscar
                            </button>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">PersonaId</label>
                            <select id="persona_select" @bind="Prestamo.PersonaId" class="form-control">
                                <option value="" disabled selected>Persona Disponibles</option>
                                @foreach (var item in Personas)
                                {
                                    <option value="@item.PersonaId">@item.Nombres</option>
                                }
                            </select>
                        </div>

                        <div class="mb-3">
                            <label>Concepto</label>
                            <InputText @bind-Value="Prestamo.Concepto" class="form-control" />
                            <ValidationMessage For="@(() => Prestamo.Concepto)" />
                        </div>

                        <div class="mb-3">
                            <label>Fecha de creación</label>
                            <InputDate @bind-Value="Prestamo.Fecha" class="form-control" />
                            <ValidationMessage For="@(() => Prestamo.Fecha)" />
                        </div>

                        
                        <div class="mb-3">
                            <label>Monto</label>
                            <InputNumber @bind-Value="Prestamo.Monto" step="0.2" class="form-control" />
                            <ValidationMessage For="@(() => Prestamo.Monto)" />
                        </div>

                        <div class="form-group">
                            <label>Balance</label>
                            <InputNumber @bind-Value="Prestamo.Balance" class="form-control " readonly />
                            <ValidationMessage For="@(() => Prestamo.Balance)" />
                        </div>

                    </form>
                </div>


                <div class="card-footer">
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo">
                            <i class="oi oi-file mr-2" />Nuevo
                        </button>

                        <button type="submit" class="btn btn-success" @onclick="Guardar">
                            <i class="oi oi-account-login" style="transform:rotate(90deg)" /> Guardar
                        </button>

                        <button type="button" class="btn btn-danger" @onclick="Eliminar">
                            <i class="oi oi-trash mr-2" />Eliminar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

</EditForm>

@code
{
    private Prestamo Prestamo = new Prestamo();
    public List<Persona> Personas { get; set; }

    protected override void OnInitialized()
    {
        Personas = PersonaBLL.GetList(p => true);
    }

    public void Nuevo()
    {
        Prestamo = new Prestamo();
    }

    private void Buscar()
    {
        var encontrado = PrestamoBLL.Buscar(Prestamo.PrestamoId);

        if (encontrado != null)
            this.Prestamo = encontrado;
        else
            toast.ShowWarning("Préstamo no encontrado");
    }

    public void Guardar()
    {
        bool guardado = PrestamoBLL.Guardar(Prestamo);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Prestamo guardado correctamente");
        }
        else
            toast.ShowError("No se pudo guardar el Préstamo");
    }

    public void Eliminar()
    {
        bool eliminado = PrestamoBLL.Eliminar(Prestamo.PrestamoId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Préstamo eliminado correctamente");
        }
        else
            toast.ShowError("No se pudo eliminar el Préstamo");
    }
}
@page "/RPersonas"

@using Tarea3.BLL;
@using Tarea3.Models;

@inject IToastService toast

    <!-- bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0" crossorigin="anonymous">

<EditForm Model="Persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Personas</h3>
        </div>
        <div class="card-body">
            <form>
                   
                <div class="input-group mb-3">
                    <div class="form-floating">
                        <input type="number" @bind-value="Persona.PersonaId" class="form-control" min="0" id="ClienteIdFlotante" placeholder="Persona Id" />
                        <label for="ClienteIdFlotante" style="color: gray;">Persona Id</label>
                    </div>
                      
                    <button type="button" class="btn btn-primary" @onclick="Buscar">Buscar</button>
                </div>

                <div class="form-floating mb-3">
                    <input type="text" @bind-value="Persona.Nombres" class="form-control" id="nombreFlotante" placeholder="Nombres" />
                    <label for="nombreFlotante" style="color: gray;">Nombres</label>
                    <ValidationMessage For="@(() => Persona.Nombres)" />
                </div>

                <div class="form-floating mb-3">
                    <input type="tel" @bind-value="Persona.Telefono" class="form-control" id="telefonoFlotante" placeholder="Teléfono" maxlength="16" />
                    <label for="telefonoFlotante" style="color: gray;">Teléfono</label>
                    <ValidationMessage For="@(() => Persona.Telefono)" />
                </div>

                <div class="form-floating mb-3">
                    <input type="text" @bind-value="Persona.Direccion" class="form-control" id="direccionFlotante" placeholder="Dirección" />
                    <label for="direccionFlotante" style="color: gray;">Dirección</label>
                    <ValidationMessage For="@(() => Persona.Direccion)" />
                </div>


                <div class="form-floating mb-3">
                    <input type="date" @bind-value="Persona.FechaNacimiento" class="form-control" id="fechaNacimientoFlotante" placeholder="Fecha Nacimiento" />
                    <label for="fechaNacimientoFlotante" style="color: gray;">Fecha Nacimiento</label>
                    <ValidationMessage For="@(() => Persona.FechaNacimiento)" />
                </div>

                
                <div class="form-floating mb-3">
                    <input type="number" @bind-value="Persona.Balance" class="form-control" id="balanceFlotante" placeholder="Balance" readonly />
                    <label for="balanceFlotante" style="color: gray;">Balance</label>
                </div>
            </form>
        </div>
 
        <div class="card-footer">
            <div class="form-group text-center">
                <button type="button" class="btn btn-primary" @onclick="Nuevo" style="margin: 5px">Nuevo</button>
                <button type="submit" class="btn btn-success" style="margin: 5px">Guardar</button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar" style="margin: 5px">Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    string Mensaje = string.Empty;

    private Persona Persona = new Persona();
    public int PersonaId { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
    }

    public void Nuevo()
    {
        Persona = new Persona();
    }

    private void Buscar()
    {
        var encontrado = PersonaBLL.Buscar(Persona.PersonaId);

        if (encontrado != null)
            this.Persona = encontrado;
        else
            toast.ShowWarning("Persona no encontrada");
    }

    public void Guardar()
    {
        bool guardado = PersonaBLL.Guardar(Persona);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Persona guardada correctamente");
        }
        else
            toast.ShowError("No se pudo guardar a la Persona");
    }

    public void Eliminar()
    {
        bool eliminado = PersonaBLL.Eliminar(Persona.PersonaId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Persona eliminada correctamente");
        }
        else
            toast.ShowError("No se pudo eliminar a la Persona");
    }
}
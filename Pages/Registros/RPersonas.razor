@page "/RPersonas"

@using Tarea3.BLL;
@using Tarea3.Models;

@inject IToastService toast

    <!-- bootstrap -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-wEmeIV1mKuiNpC+IOBjI7aAzPcEZeedi5yW5f2yOq55WWLwNGmvvx4Um1vskeMj0" crossorigin="anonymous">

<EditForm Model="Persona" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="row d-flex justify-content-center">

        <div class="col-md-6 col-sm-11 col-11">

            <div class="card mt-1">

                <div class="card-header">
                    <h3>Registro de Personas</h3>
                </div>

                <div class="card-body">
                    <form>

                        <div class="mb-3">
                            <label class="form-label">PersonaId</label>
                            <InputNumber class="form-control" @bind-Value="Persona.PersonaId" />
                            <button class="btn btn-warning" type="button" @onclick="Buscar">
                                <i class="oi oi-magnifying-glass" /> Buscar
                            </button>
                        </div>

                        <div class="mb-3">
                            <label>Nombres</label>
                            <input type="text" @bind-value="Persona.Nombres" class="form-control" />
                            <ValidationMessage For="@(() => Persona.Nombres)" />
                        </div>

                        <div class="mb-3">
                            <label>Teléfono</label>
                            <input type="tel" @bind-value="Persona.Telefono" class="form-control" />
                            <ValidationMessage For="@(() => Persona.Telefono)" />
                        </div>

                        <div class="mb-3">
                            <label for="direccionFlotante">Dirección</label>
                            <input type="text" @bind-value="Persona.Direccion" class="form-control" />
                            <ValidationMessage For="@(() => Persona.Direccion)" />
                        </div>


                        <div class="mb-3">
                            <label>Fecha Nacimiento</label>
                            <input type="date" @bind-value="Persona.FechaNacimiento" class="form-control" />
                            <ValidationMessage For="@(() => Persona.FechaNacimiento)" />
                        </div>


                        <div class="mb-3">
                            <label for="balanceFlotante">Balance</label>
                            <input type="number" @bind-value="Persona.Balance" class="form-control" readonly />
                        </div>
                    </form>
                </div>

                <div class="card-footer">
                    <div class="form-group text-center">
                        <button type="button" class="btn btn-primary" @onclick="Nuevo">
                            <i class="oi oi-file mr-2" />Nuevo
                        </button>

                        <button type="submit" class="btn btn-success" @onclick="Guardar">
                            <i class="oi oi-account-login" style="transform:rotate(90deg)" /> Guardar
                        </button>

                        <button type="button" class="btn btn-danger" @onclick="Eliminar">
                            <i class="oi oi-trash mr-2" />Eliminar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
</EditForm>

@code {
    string Mensaje = string.Empty;

    private Persona Persona = new Persona();
    public int PersonaId { get; set; }

    protected override void OnInitialized()
    {
        Nuevo();
    }

    public void Nuevo()
    {
        Persona = new Persona();
    }

    private void Buscar()
    {
        var encontrado = PersonaBLL.Buscar(Persona.PersonaId);

        if (encontrado != null)
            this.Persona = encontrado;
        else
            toast.ShowWarning("Persona no encontrada");
    }

    public void Guardar()
    {
        bool guardado = PersonaBLL.Guardar(Persona);

        if (guardado)
        {
            Nuevo();
            toast.ShowSuccess("Persona guardada correctamente");
        }
        else
            toast.ShowError("No se pudo guardar a la Persona");
    }

    public void Eliminar()
    {
        bool eliminado = PersonaBLL.Eliminar(Persona.PersonaId);

        if (eliminado)
        {
            Nuevo();
            toast.ShowSuccess("Persona eliminada correctamente");
        }
        else
            toast.ShowError("No se pudo eliminar a la Persona");
    }
}